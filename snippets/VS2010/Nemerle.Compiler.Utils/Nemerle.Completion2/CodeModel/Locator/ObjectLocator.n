using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Token;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;
using Nemerle.Imperative;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2
{
    public class ObjectLocator
    {
        /// Finds an object by provided location.
		/// Returns object location * associated Parsetree * associated Typedtree
		static public FindObject(
		  typeDecl  : Decl.Type,
		  fileIndex : int,
		  line      : int,
		  col       : int,
		  unpackMemberRefs = true
		)
		  : Location * object * object
		{
		  when (typeDecl.Ast != null && typeDecl.Ast.TypeBuilder == null)
			return (typeDecl.Ast.Location, null, typeDecl.Ast);

		  def typeBuilder = typeDecl.Ast.TypeBuilder;
		  def member      = 
			if (typeBuilder.IsDelegate) typeBuilder : IMember
			else typeBuilder.GetMemberByLocation(fileIndex, line, col) ?? typeBuilder;

		  def checkType(pexpr, texpr : TypeVar) 
		  {
			def pargs =
			  match (pexpr)
			  {
				| PExpr.Array  (_, p)          => [p]
				| PExpr.Call   (_, p)
				| PExpr.Indexer(_, p)
				| PExpr.GenericSpecifier(_, p) => p
				| _                            => []
			  };

			match (pargs.Find((p) => p.Location.Contains(line, col)))
			{
			  | Some(p) =>
				  def targs =
					match (texpr)
					{
					  | mType is FixedType =>
						match (mType)
						{
						| FixedType.Array (p, _) => [p]
						| FixedType.Fun   (f, t) => [f, t]
						| FixedType.Class (_, p)
						| FixedType.Tuple (p)    => p
						| _                  => []
						}
					  | _                    => []
					};

				  def idx = pargs.IndexOf(p);
				  checkType(p, targs.Nth(idx))

			  | _       => (pexpr.Location, null, texpr)
			}
		  }

		  def getMethod(method)
		  {
			def ast = method.Ast;
			def headerLocation = ast.header.Location;
			def bodyLocation = method.BodyLocation;

			// Body must be processed first.
			
			if (method.IsBodyCompilable 
				&& (bodyLocation.Contains(line, col) || bodyLocation.IsGenerated))
			{
			  def getParameterNumber(name, parameters, i = 0)
			  {
				| (_, parameter :: tail, _) =>
				  if (parameter.Name == name)
					i
				  else
					getParameterNumber(name, tail, i + 1)
				| (_, [], _) => -1
			  }

			  def (loc, _, typedObject) as found = ExprFinder().Find(method.BodyParsed, method.BodyTyped, line, col, unpackMemberRefs);

			  match (typedObject)
			  {
				| reference is LocalValue when (reference.ValKind is LocalValue.Kind.FunParm) =>
				  def function = reference.DefinedIn;
				  def number = getParameterNumber(reference.Name, function.ParametersDeclarations);
				  if (number < 0)
					found
				  else
				  {
					def parsedParameter = function.ParametersDeclarations.Nth(number);
					def typedParameter = function.Parameters.Nth(number);
					(loc, parsedParameter.name, typedParameter)
				  }
				| ty is TExpr.This | ty is TExpr.Base => (loc, null, ty.FixedType())
				| _ => found
			  }
			}
			else if (headerLocation.Contains(line, col) || headerLocation.IsGenerated)
			{
			  if (ast.header.ParsedSplicableName.Location.Contains(line, col))
				(ast.header.ParsedSplicableName.Location, ast, method)
			  else if (ast.header.ParsedReturnType.Location.Contains(line, col))
				checkType(ast.header.ParsedReturnType, method.ReturnType);
			  else if (ast.modifiers.custom_attrs.OrderedContains(line, col))
			  {
				// PB06116: TODO: CustomAttributes
				//
				(Location.Default, null, null)
			  }
			  else
			  {
				def getParam(pparms, tparms)
				{
				  match (pparms)
				  {
				  | []     => (Location.Default, null, null)
				  | p :: _ =>

					if (p.name.Location.Contains(line, col))
					  (p.name.Location, p.name, tparms.Head)
					else if (p.Type.Location.Contains(line, col))
					  checkType(p.Type, tparms.Head.ty)
					else
					  getParam(pparms.Tail, tparms.Tail)

				  }
				}

				getParam(ast.header.ParsedParameters, method.Header.Parameters);
			  }
			}
			else
			{
			  def typarms = ast.header.ParsedTypeParameters;

			  if (typarms.tyvars.OrderedContains(line, col))
				match (typarms.tyvars.Find(t => t.Location.Contains(line, col)))
				{
				| Some(t) => (t.Location, null, method.Header.TypeParameters.Nth(typarms.tyvars.IndexOf(t)))
				| _       => (Location.Default, null, null)
				}
			  else
			  {
				// Covarian/Contravariant constraints breaks OrderedContains optimization
				// so process them one-by-one.
				//
				def constraints = typarms.constraints.RevFilter(c => !Utils.IsSpecialConstraint(c.ty));

				match (constraints.Find(c => c.ty.Location.Contains(line, col)))
				{
				| Some(c) =>

				  def tyVarConstraints = constraints.Filter(tc => tc.tyvar.Equals(c.tyvar));
				  def typarm = method.Header.TypeParameters.Nth(typarms.tyvars.IndexOf(c.tyvar));

				  Debug.Assert(tyVarConstraints.Length == typarm.Constraints.Length);
				  (c.ty.Location, null, typarm.Constraints.Nth(tyVarConstraints.IndexOf(c)))

				| _       =>           (Location.Default, null, null)
				}
			  }
			}
		  }

		  def checkMethods (methods)
		  {
			| hd :: tail =>
			  if (hd != null && hd.BodyLocation.Contains(line, col))
				getMethod(hd)
			  else
				checkMethods(tail)
			| []         => (Location.Default, null, null)
		  }

		  def processMember(member : IMember)
		  {
			| mb is MethodBuilder   => getMethod(mb)
			| eb is EventBuilder    => 

				if (eb.Ast.ty.Location.Contains(line, col))
				  checkType(eb.Ast.ty, eb.GetMemType())
				else if (eb.Ast.name.Location.Contains(line, col))
				  (eb.Ast.name.Location, null, eb)
				else
				  checkMethods([eb.GetAdder(), eb.GetRemover()])

			| fb is FieldBuilder    => 

			  if (typeBuilder.IsEnum)
				if (fb.Attributes %&& NemerleModifiers.SpecialName)
				  (Location.Default,     null, null)
				else
				  (fb.Location,          null, fb)
			  else
				if (fb.Ast.ty.Location.Contains(line, col))
				  checkType(fb.Ast.ty, fb.GetMemType())
				else if (fb.Ast.name.Location.Contains(line, col))
				  (fb.Ast.name.Location, null, fb)
				else if (fb.InitializerLocation.Contains(line, col))
				  getMethod(fb.LookupInitializerMethod())
				else
				  (fb.Location,          null, fb)

			| pb is PropertyBuilder => 

				if (pb.Ast.returnType.Location.Contains(line, col))
				  match (pb.GetMemType())
				  {
					| f is FixedType.Fun => checkType(pb.Ast.returnType, f.to) // Indexer
					| t                  => checkType(pb.Ast.returnType, t)    // Regular prop
				  }
				else if (pb.Ast.name.Location.Contains(line, col))
				  (pb.Ast.name.Location, null, pb)
				else
				{
				  def parms = pb.Ast.parameters;

				  match (parms.Find(p => p.Type.Location.Contains(line, col)))
				  {
				  | Some(p) => checkType(p.Type, pb.GetParameters().Nth(parms.IndexOf(p)))
				  | _       => checkMethods([pb.GetGetter() :> MethodBuilder, pb.GetSetter() :> MethodBuilder])
				  }
				}

			| tb is TypeBuilder     => 

			  def lookupType(p)
			  {
			  | PExpr.Ref (name) =>
				  match (name.context.LookupType([name.Id], tb, -1))
				  {
				  | Some(ty) => (p.Location, null, ty)
				  | _        => (Location.Default, null, null)
				  }
			  | PExpr.Indexer(obj, args) =>
				  match ((obj :: args).Find(a => a.Location.Contains(line, col)))
				  {
				  | Some (p) => lookupType(p)
				  | _        => (Location.Default, null, null)
				  }
			  | _        => (p.Location, null, null)
			  }

			  def processAst (tb, ast)
			  {
				match (ast)
				{
				| TopDeclaration.Class    (extends, _)
				| TopDeclaration.Variant  (extends, _)
				| TopDeclaration.Interface(extends, _) =>

				  // Remove compiler generated base type or interface
				  //
				  def extends = extends.Filter(cls => !cls.Location.IsGenerated);

				  def typarms = ast.typarms;

				  if (extends.OrderedContains(line, col))
					match (extends.Find(t => t.Location.Contains(line, col)))
					{
					| Some(p) => (p.Location, p, p.TypedObject)
					| _       => (Location.Default, null, null)
					}
				  else if (typarms.tyvars.OrderedContains(line, col))
					match (typarms.tyvars.Find(t => t.Location.Contains(line, col)))
					{
					| Some(t) => (t.Location, null, tb.Typarms.Nth(typarms.tyvars.IndexOf(t)))
					| _       => (Location.Default, null, null)
					}
				  else
				  {
					// Covariant/Contravariant constraints breaks OrderedContains optimization
					// so process them one-by-one.
					//
					match (typarms.constraints.Find(c => c.ty.Location.Contains(line, col)))
					{
					| Some (c) => lookupType(c.ty)
					| _        => (ast.PName.Location, null, tb : object)
					}
				  }
				| _ => (ast.PName.Location, null, tb : object)
				}
			  }

			  match (tb.AstParts.Find(part => part.Location.Contains(fileIndex, line, col)))
			  {
			  | Some(ast) => processAst (tb, ast)
			  | _         => (Location.Default, null, null)
			  }

			| null                  => (Location.Default, null, null)
			| _                     => 
			  Debug.Assert(false, $"Unknown member type '$member'.");
			  throw System.Exception($"Unknown member type '$member'.");
		  }
		  
		  def result = processMember(member);
		  match (member, result)
		  {
			| (mb is MemberBuilder, (_, null, null)) => mb.CallForAllRelated(processMember)
			| _ => 
			  match (result)
			  {
				//HACK: VladD2: The compiler not set information for static type ref in TExpr.StaticRef.
				| (_, PExpr.Member(pObj, _), TExpr.StaticRef(tObj, _, _)) 
				  when pObj.Location.Contains(line, col) => 
				  def tryFindNestedType(pObj, tObj : FixedType)
				  {
					| (PExpr.Member(pObj, _), FixedType.Class(ti, tyArgs)) 
					  when ti.DeclaringType != null && pObj.Location.Contains(line, col) => 
					  tryFindNestedType(pObj, FixedType.Class(ti.DeclaringType, tyArgs))
					| _ => (pObj.Location, pObj, tObj)
				  }
				  
				  tryFindNestedType(pObj, tObj)
				  
				| _ => result
			  }
		  }
		}
    }
}